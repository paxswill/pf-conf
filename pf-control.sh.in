#!/bin/bash

# ==============================================================================
#   pf-control.sh
# 
#   Packet Filter control script
#   Copyright 2012 Hannes Juutilainen <hjuutilainen@mac.com>
#   https://github.com/hjuutilainen/pf-conf
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# ==============================================================================

# ========================================
# Declare variables
# ========================================
REVERSE_DOMAIN="DOMAIN_TOKEN"
DEFAULT_RULES_FILE="/etc/pf.anchors/${REVERSE_DOMAIN}"
MACROS_FILE="/etc/pf.anchors/${REVERSE_DOMAIN}.macros"
CUSTOM_RULES_D="/etc/pf.anchors/${REVERSE_DOMAIN}.d"
TOKEN_FILE="/var/run/${REVERSE_DOMAIN}.pf.token"
PFCTL="/sbin/pfctl"
ECHO="/bin/echo"
STAT="/usr/bin/stat"
PRINTF="/usr/bin/printf"
SYSCTL="/usr/sbin/sysctl"
CAT="/bin/cat"
RM="/bin/rm"
BASENAME="/usr/bin/basename"
GREP="/usr/bin/grep"
TR="/usr/bin/tr"
OP_MODE="restart"

# ========================================
function usage () {
# ========================================
    echo ""
    echo "$0 [-h|--help|h] [start|stop|restart]"
    echo ""
    echo "Where:"
    echo "-h|--help|h   Print this message"
    echo "start         Start the firewall (without flushing)"
    echo "stop          Stop the firewall and flush rules"
    echo "restart       Flush and re-read all rules and restart firewall"
    exit
}

# ========================================
function checkFilePerms () {
# ========================================
    FILESTATS=`$STAT -f "%Su:%Sg, %SHp%SMp%SLp" "$1"`
    if [[ $FILESTATS != "root:wheel, rw-r--r--" ]]; then
    return 1
    else
    return 0
    fi
}

# ========================================
function checkDirectoryPerms () {
# ========================================
    FILESTATS=`$STAT -f "%Su:%Sg, %SHp%SMp%SLp" "$1"`
    if [[ $FILESTATS != "root:wheel, rwxr-xr-x" ]]; then
    return 1
    else
    return 0
    fi
}

# ========================================
function verifyFiles () {
# ========================================
    $ECHO ""
    $ECHO "Verifying configuration security:"
    
    FORMAT="%-50s%-10s\n"
    INSECURE="Failed (Insecure, will not be loaded)"
    VERIFIED="OK"
    NOT_FOUND="Failed (No such file or directory)"
    OBJECT=""
    RESULT=""
    
    OBJECT=$CUSTOM_RULES_D
    if [[ -d "$CUSTOM_RULES_D" ]]; then
    if checkDirectoryPerms "$CUSTOM_RULES_D"; then
        RESULT=$VERIFIED
    fi
    else
    RESULT=$NOT_FOUND
    fi
    $PRINTF "$FORMAT" "$OBJECT" "$RESULT"

    if [[ -d $CUSTOM_RULES_D ]]; then
    shopt -s nullglob
    DID_FIND_CUSTOMRULE_FILES=0
    CUSTOM_RULES="${CUSTOM_RULES_D}/*"
    for f in $CUSTOM_RULES
    do
        OBJECT=$f
        if checkFilePerms "$f"; then
        RESULT=$VERIFIED
        DID_FIND_CUSTOMRULE_FILES=1
        else
        RESULT=$INSECURE
        fi
        $PRINTF "$FORMAT" "$OBJECT" "$RESULT"
    done
    shopt -u nullglob
    fi
}

# ========================================
function enablePfctl () {
# ========================================
    $ECHO ""
    $ECHO "Starting Packet Filter and reading default rules"
    local token="`$PFCTL -E 2>&1 > /dev/null | $GREP -o -e '[0-9]*$' | $TR -d [:blank:]`"
    $ECHO "Packet Filter Token: $token"
    $ECHO "$token" > "$TOKEN_FILE"
}

# ========================================
function disablePfctl () {
# ========================================
    $ECHO ""
    $ECHO "Disabling Packet Filter"
    if [[ -r $TOKEN_FILE ]]; then
        $PFCTL -X `$CAT "$TOKEN_FILE"`
        $RM "$TOKEN_FILE"
    else
        $PFCTL -d
    fi
}

# ========================================
function appendAnchor () {
# ========================================
    local normalization=$($PFCTL -sr | $GREP scrub)
    local translation=$($PFCTL -sn)
    local filtering=$($PFCTL -sr | $GREP -v scrub)
    normalization=$($PRINTF '%s\nscrub-anchor "%s"\nscrub-anchor "%s/*"\n' "$normalization" "$1" "$1")
    translation=$($PRINTF '%s\nnat-anchor "%s"\nrdr-anchor "%s"\n' "$translation" "$1" "$1")
    translation=$($PRINTF '%s\nnat-anchor "%s/*"\nrdr-anchor "%s/*"\n' "$translation" "$1" "$1")
    filtering=$($PRINTF '%s\nanchor "%s"\nanchor "%s/*"\n' "$filtering" "$1" "$1")
    local new_rules=$($PRINTF '%s\n%s\n%s\n' "$normalization" "$translation" "$filtering")
    $ECHO ""
    $ECHO "Setting new rules to:"
    $ECHO "$new_rules"
    $ECHO "$new_rules"| $PFCTL -f -
}

# ========================================
function unloadAnchor () {
# ========================================
    $ECHO ""
    $ECHO "Unloading anchor $1"
    $PFCTL -a $1 -Fa
    $ECHO "Removing anchor $1 from the rules"
    local normalization=$($PFCTL -sr | $GREP scrub)
    local translation=$($PFCTL -sn)
    local filtering=$($PFCTL -sr | $GREP -v scrub)
    normalization="$($ECHO "$normalization" | $GREP -v "$REVERSE_DOMAIN")"
    translation="$($ECHO "$translation" | $GREP -v "$REVERSE_DOMAIN")"
    filtering="$($ECHO "$filtering" | $GREP -v "$REVERSE_DOMAIN")"
    local new_rules=$($PRINTF '%s\n%s\n%s\n' "$normalization" "$translation" "$filtering")
    $ECHO ""
    $ECHO "Setting new rules to:"
    $ECHO "$new_rules"
    $ECHO "$new_rules"| $PFCTL -f -
}

# ========================================
function loadDefaultRules () {
# ========================================
    $ECHO ""
    $ECHO "Loading ${DEFAULT_RULES_FILE} under anchor ${REVERSE_DOMAIN}"
    if checkFilePerms "$DEFAULT_RULES_FILE"; then
        $PFCTL -a ${REVERSE_DOMAIN} -f "$DEFAULT_RULES_FILE"
        appendAnchor ${REVERSE_DOMAIN}
    else
        $ECHO "${DEFAULT_RULES_FILE} is not loaded (Unsafe permissions)."
        disablePfctl
        exit
    fi
}

# ========================================
function loadCustomRules () {
# ========================================
    for rule in "${CUSTOM_RULES_D}"/*; do
        local anchor_name=$($BASENAME -s .pf $($BASENAME -s .conf "$rule"))
        $ECHO "Loading $rule under anchor ${REVERSE_DOMAIN}/$anchor_name"
        if checkFilePerms "$rule"; then
            $PFCTL -a "${REVERSE_DOMAIN}/${anchor_name}" -f "$rule"
        else
            $ECHO "${rule} is not loaded (Unsafe permissions)."
        fi
    done
}



# ========================================
function unloadDefaultRules () {
# ========================================
    unloadAnchor "${REVERSE_DOMAIN}"
}

# ========================================
function unloadCustomRules () {
# ========================================
    unloadAnchor "${REVERSE_DOMAIN}/*"
}

# ========================================
function showCurrentRules () {
# ========================================
    $ECHO ""
    $ECHO "Current rules:"
    $PFCTL -a '*' -sr
}

# ========================================
function configureKernelParameters () {
# ========================================
    $SYSCTL -w net.inet.ip.fw.enable=1 > /dev/null 2>&1
    $SYSCTL -w net.inet.ip.fw.verbose=2 > /dev/null 2>&1
    $SYSCTL -w net.inet6.ip6.fw.verbose=0 > /dev/null 2>&1
    $SYSCTL -w net.inet.ip.fw.verbose_limit=0 > /dev/null 2>&1
    $SYSCTL -w net.inet.ip.forwarding=1 > /dev/null 2>&1
    $SYSCTL -w net.inet6.ip6.forwarding=1 > /dev/null 2>&1
}


while test -n "$1"; do
  case $1 in 
      -h|--help|h) 
      usage
      ;;
      start) 
      OP_MODE="start"
      shift
      ;;
      stop) 
      OP_MODE="stop"
      shift
      ;;
      restart)
      OP_MODE="restart"
      shift
      ;; 
      *) 
      usage
      ;; 
  esac
done

# Check for root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 2>&1
    exit 1
else
    verifyFiles
    
    if [[ $OP_MODE == "start" ]]; then
        configureKernelParameters
        enablePfctl
        loadDefaultRules
        loadCustomRules
        showCurrentRules
    
    elif [[ $OP_MODE == "stop" ]]; then
        unloadCustomRules
        unloadDefaultRules
        disablePfctl
    
    elif [[ $OP_MODE == "restart" ]]; then
        configureKernelParameters
        unloadCustomRules
        unloadDefaultRules
        disablePfctl
        enablePfctl
        loadDefaultRules
        loadCustomRules
        showCurrentRules
    
    else
        echo "Unknown operation mode..."
        usage
        exit 1
    fi
fi

exit 0
